#!/usr/bin/env bash
# 
# Run the Rosie CLI

ROSIE_SCRIPT_HOME="{$1}"

if [[ -z ROSIE_SCRIPT_HOME ]]; then
    echo "Error: missing required first argument (Rosie installation directory)"
    echo "This script should NOT be invoked directly.  It is exec\'d by bin/rosie."
    echo "Note that this argument, while required, will be ignored if \$ROSIE_HOME is set"
    exit -1
fi


if [[ -n "${ROSIE_HOME}" ]]; then
    home=${ROSIE_HOME}
else
    home=${1}
fi
shift
executable="${home}/bin/lua"

# Test to see if ${home} is a Rosie installation directory
if [[ ! -d "${home}" ]]; then
    echo Error: ${home} is not a directory
    if [[ -z ${ROSIE_HOME} ]]; then
	echo "This value is named in the executable script that launches rosie,"
	echo "and an invalid value suggests the rosie installation failed."
	echo "Try uninstalling and reinstalling rosie."
    else
	echo "This directory is the value of the environment variable \$ROSIE_HOME,"
	echo "which should point to a rosie installation, but it does not."
	echo "Try 'unset ROSIE_HOME' to use the default system installation of rosie."
    fi
    exit -1
elif [[ ! -x "${executable}" ]]; then
    echo Error: ${executable} not found or not executable
    echo "The directory ${home} does not appear to contain a rosie installation."
    exit -1
fi


# -D is an 'undocumented' command line option that launches Rosie in development mode

i=""
dev="false"
if [[ "$1" = "-D" ]]; then
   i="-i"
   dev="true"
   shift
fi

export ROSIE_COMMAND="$(ps -o args= $PPID)"
export ROSIE_HOME
export ROSIE_SCRIPT_HOME
export HOSTNAME
export HOSTTYPE
export OSTYPE
export PWD

# Lua's "long string" syntax is needed because command line args could contain single and/or double quotes.
# Since RPL contains expressions delimited by [[ ... ]], we use Lua's [====[ ... ]====] for scriptname.
# The need to wrap the args will be removed or implemented more robustly before or in Rosie Version 1.0.
${executable} $i "${home}/src/run.lua" "${home}" "${dev}" "$@"


