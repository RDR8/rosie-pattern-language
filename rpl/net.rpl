---- -*- Mode: rpl; -*-                                                                             
---- vim:syn=rosie
----
---- net.rpl     Rosie Pattern Language patterns for hostnames, ip addresses, and such
----
---- Â© Copyright IBM Corporation 2016, 2017.
---- LICENSE: MIT License (https://opensource.org/licenses/mit-license.html)
---- AUTHORS: Jamie A. Jennings, Kevin Zander

rpl 1.1

package net
-- [1] RFC1123 Requirements for Internet Hosts -- Application and Support
-- (https:--tools.ietf.org/html/rfc1123) 
-- [2] RFC3696 Application Techniques for Checking and Transformation of Names
-- (https:--tools.ietf.org/html/rfc3696)

---------------------------------------------------------------------------------------------------
-- IP ADDRESSES
---------------------------------------------------------------------------------------------------
local alias ipv4_component = [:digit:]{1,3}
local alias ip_address_v4 = { ipv4_component {"." ipv4_component}{3} }

local alias ipv6_component = [:xdigit:]{1,4}
local alias ipv6_rest = { ":" ipv6_component }

-- ipv6 per RFC5952 (https://tools.ietf.org/html/rfc5952)
-- FUTURE: add the mixed syntax (ipv6/ipv4) for ipv4 addresses that are mapped into ipv6.
local alias ip_address_v6 = {
	{ ipv6_component ipv6_rest{7,7} } /
	{ ipv6_component "::" ipv6_component ipv6_rest{0,4} } /
	{ ipv6_component ipv6_rest{1} "::" ipv6_component ipv6_rest{0,3} } /
	{ ipv6_component ipv6_rest{2} "::" ipv6_component ipv6_rest{0,2} } /
	{ ipv6_component ipv6_rest{3} "::" ipv6_component ipv6_rest{0,1} } /
	{ ipv6_component ipv6_rest{4} "::" ipv6_component } /
	{ ipv6_component ipv6_rest{5} "::" } /
	{ "::" ipv6_component ipv6_rest{0,5} } /
	{ "::" }  -- undefined address
}

ipv4 = ip_address_v4
-- test ipv4 accepts "0.0.0.0", "1.2.234.123", "999.999.999.999"
-- test ipv4 rejects "1234.1.2.3"
-- TODO: add some more rejecting tests

ipv6 = ip_address_v6
-- test ipv6 accepts "::", "::1", "::face:b00c"
-- test ipv6 accepts "2001:0db8:0000:0000:0000:ff00:0042:8329", "2001:db8:0:0:0:ff00:42:8329", "2001:db8::ff00:42:8329"
-- TODO: add some rejecting tests

ip = ipv4 / ipv6
-- the above tests validate ip
-- test ip includes ipv4 "1.2.3.4"


---------------------------------------------------------------------------------------------------
-- HOSTNAMES
---------------------------------------------------------------------------------------------------
-- Notes:
-- (1) RFC1035 (https://tools.ietf.org/html/rfc1035) specifies this grammar for hostnames (but calls
--     them domains): 
--       <domain> ::= <subdomain> | " "
--       <subdomain> ::= <label> | <subdomain> "." <label>
--       <label> ::= <letter> [ [ <ldh-str> ] <let-dig> ]
--       <ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str> 
--       <let-dig-hyp> ::= <let-dig> | "-"
--       <let-dig> ::= <letter> | <digit>
-- (2) RFC2181 (https://tools.ietf.org/html/rfc2181#section-11) says that domain names submitted as 
--     queries to DNS can contain any characters, and reportedly there exist domain names that
--     contain the underscore (_) character.  Such domain names are not valid hostnames.
-- (3) We define the pattern 'host' (short for 'hostname') to match a hostname that may be partially
--     qualified.  It may not contain a dot (.) at all.
-- (4) We define the pattern 'fqdn' to match hostnames that contain AT LEAST one dot (.) even though
--     such names may actually be only partially qualified.  A better name for this pattern would be
--     'pqdn' but this is not an easily recognized abbreviation, whereas 'fqdn' is.
-- (5) Technically, a domain name can contain any characters at all.  Hostnames are restricted as
--     shown in the RFC1035 grammar above.  It is not useful to define a pattern that matches any
--     character sequence at all, so we will not define a "domain name" pattern.

local alias port = { ":" [0-9]+ }
local alias let = [[A-Z][a-z]]
local alias let_dig = let / [0-9]
local alias let_dig_hyp = let_dig / {"-" let_dig}
local subdomain = { let let_dig_hyp* }
host = { subdomain {"." subdomain}* "."? port? }
fqdn = { subdomain {"." subdomain}+ "."? port? }

-- test host accepts "a.edu", "A.BC.EDU", "X-Y.CS.CORNELL.EDU", "SRI-NIC.ARPA"
-- test host accepts "ibm.com.", "ibm.com:443", "ibm.com.:80"
-- test host rejects ".EDU", "XY-.CS.CORNELL.EDU", "9A.SRI-NIC.ARPA"
-- test host rejects "ibm.com:", "ibm.com:x"

-- test host accepts "a", "abc", "ZZZZZZ", "Z-9"
-- test fqdn rejects "a", "abc", "ZZZZZZ", "Z-9"

---------------------------------------------------------------------------------------------------
-- EMAIL ADDRESSES
---------------------------------------------------------------------------------------------------
-- Per RFC3696, the specification for the alias part of an email address is considerably more
-- involved than this simple pattern, which can accept some invalid addresses and may reject some
-- valid ones.

alias name_char = { [:alnum:] / [!#$%\^&*()_-+=|\\'`~?/{}{}:;] }
alias name = { name_char {name_char / "."}* }
email = { name "@" host }
-- test email accepts "me@here.com", "you+filter@somewhere.org"
-- TODO: add rejecting email strings

---------------------------------------------------------------------------------------------------
-- URI
---------------------------------------------------------------------------------------------------

-- URI syntax highly simplified here (e.g. no query parms)
protocol = {{[:alpha:]+} "://"}
local alias path_char = [:alpha:] / [:digit:] / [-._~!$&'()*+,;=:@] / { "%" [:xdigit:] [:xdigit:] }
rooted_path = { "/" path_char+ }+ / "/"
url = {protocol {host / ipv4}? rooted_path?}
-- test url accepts "http://www.google.com", "http://google.com/"
-- test url accepts "https://www.github.com/jamiejennings/rosie-pattern-language"
-- test url accepts "ftp://some.ftp.net/path/to/file.zip"

---------------------------------------------------------------------------------------------------
-- HTTP commands
---------------------------------------------------------------------------------------------------

-- Some very simple HTTP patterns
http_command_name = "GET" / "HEAD" / "PUT" / "POST" / "DELETE" / 
                    "TRACE" / "OPTIONS" / "CONNECT" / "PATCH"
http_command = http_command_name (url / rooted_path)
http_version = {"HTTP" "/" [:digit:]+ "." [:digit:]+}     -- e.g. "HTTP1.1"

---------------------------------------------------------------------------------------------------
-- net.any will match common network patterns (but not all the patterns defined above!)
---------------------------------------------------------------------------------------------------

-- Match an IP, Host, Email, URL
any = ip / fqdn / email / url
