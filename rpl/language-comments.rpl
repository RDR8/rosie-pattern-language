---- -*- Mode: rpl; -*-                                                                             
----
---- language-comments.rpl   Extract comments (or just code) from source files
----
---- Â© Copyright IBM Corporation 2016.
---- LICENSE: MIT License (https://opensource.org/licenses/mit-license.html)
---- AUTHOR: Jamie A. Jennings

-- USAGE:
-- You must use rosie's -wholefile command line option with these patterns. 
--
-- EXAMPLE: extract comments
-- bash-3.2$ rosie -wholefile c.any_comment tmp/lpeg-1.0.0/lpvm.c

-- ** $Id: lpvm.c,v 1.6 2015/09/28 17:01:25 roberto Exp $
-- ** Copyright 2007, Lua.org & PUC-Rio  (see 'lpeg.html' for license)
--   initial size for call/backtrack stack  
-- ** {======================================================
-- ** Virtual Machine
-- ** =======================================================
--   saved position (or NULL for calls)   next instruction  
-- ** Double the size of the array of captures
-- [...]
--
-- EXAMPLE: extract code
-- bash-3.2$ rosie -wholefile c.code_only tmp/lpeg-1.0.0/lpvm.c
-- 
-- #include <limits.h>
-- #include <string.h>
-- 
-- #include "lua.h"
-- #include "lauxlib.h"
-- [...]



-- require "csv"

alias dquoted_field = csv.contents_dquote
alias squoted_field = csv.contents_squote

alias string_constant = csv.dquoted_field / csv.squoted_field

comment = {!"\n" .}*		-- terminates at newline or end of input
alias hash_comment = {[:space:]* "#" comment "\n"?} -- note: eats newline if not at end of input
alias hash_skip = { string_constant / {!"#" .} }*

----------------------------------------------------------------------------------------
-- Ruby
----------------------------------------------------------------------------------------

-- useful patterns to search for: ruby.line_comment, ruby.any_comment
-- FIXME:
--   N.B. These patterns do not detect ruby's "here documents", which are a long form of string
--   literal.  Thus, if a ruby long string contains something that looks like a comment, it will turn
--   up in the comment pattern.

alias ruby.line_comment = hash_comment*
alias ruby.any_comment = { hash_skip hash_comment }*

----------------------------------------------------------------------------------------
-- Python
----------------------------------------------------------------------------------------

-- useful patterns to search for: py.line_comment, py.any_comment, py.block_comment, py.code_only

alias py.block_comment_delimeter = { "\"\"\"" / "'''" }
alias py.any_skip = {!py.block_comment_delimeter !hash_comment .}*
py.block_comment_contents = { !py.block_comment_delimeter . }*

alias py.block_comment = { py.block_comment_delimeter py.block_comment_contents py.block_comment_delimeter }
alias py.line_comment = hash_comment*
alias py.any_comment = { py.any_skip {py.block_comment / hash_comment} }*

alias py.comments_to_skip = 
   { {py.block_comment_delimeter {!py.block_comment_delimeter .}* py.block_comment_delimeter}
     /
     {"#" {!"\n" .}* }
   }

py.code = {!py.block_comment_delimeter !"#" .}+         -- keep chars up to a comment
alias py.code_only = { py.comments_to_skip / py.code}*  -- discard comments, keep code


----------------------------------------------------------------------------------------
-- Perl
----------------------------------------------------------------------------------------

-- useful patterns to search for: pl.line_comment, pl.any_comment
alias pl.line_comment = hash_comment*
alias pl.any_comment = { hash_skip hash_comment }*

----------------------------------------------------------------------------------------
-- javascript, Java, C, and more
----------------------------------------------------------------------------------------

-- useful patterns to search for: js.line_comment, js.block_comment, js.any_comment,
-- js.code_only, c.any_comment, c.code_only

alias js.comment_char = "//"

alias js.start_comment = "/*"
alias js.end_comment = "*/"
alias js.any_comment_start = js.comment_char / js.start_comment

alias js.block_comment_skip = {!js.start_comment .}*

js.comment_block = {!js.end_comment .}*

alias js.block_comment_full = { js.start_comment
				js.comment_block
				js.end_comment 
			     }
alias js.skip = { string_constant / {!js.any_comment_start .} }*

alias js.block_comment = { js.block_comment_skip js.block_comment_full }+
alias js.line_comment = {[:space:]* js.comment_char comment "\n"?}+
alias js.any_comment = { js.skip {js.line_comment / js.block_comment_full} }+

alias js.comments_to_skip =
   {js.start_comment {!js.end_comment .}* js.end_comment} / {js.comment_char {!"\n" .}*}
js.code = {!js.start_comment !js.comment_char .}+       -- keep chars up to a comment
alias js.code_only = { js.comments_to_skip / js.code}*  -- discard comments, keep code

c.any_comment = js.any_comment
c.code_only = js.code_only
