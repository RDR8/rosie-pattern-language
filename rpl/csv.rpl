---- -*- Mode: rpl; -*- 
----
---- csv.rpl     RPL patterns for CSV files
----
---- (c) 2016, Jamie A. Jennings
----

-- Strings are always in quotes, so this pattern matches a quote, then stuff, then another quote.
-- The stuff in the string can be single characters or escaped quotation mark.  Note that it's
-- important to look for the escaped quote first, and only if that is not found do we look for any
-- single character.

-- Note: Some CSV files may use a pair of quote marks in a row to embed a quote mark in a string.
-- So we will defined an escaped quote as either the escape character (\) followed by a quote, or
-- two quotes in a row.
   
alias csv.dquote = "\""				    -- "
csv.escaped_dquote = "\\\"" / "\\\"\\\"" / "\"\""   -- \" or \"\" or "" 
alias csv.squote = "'"				    -- '
csv.escaped_squote = "\\'" / "\\'\\'" / "''"	    -- \' or \'\' or ''
-- Capture the contents of a quoted field by assigning it to an RPL name:
csv.dquoted_field = {csv.escaped_dquote / {!csv.dquote .}}*
csv.squoted_field = {csv.escaped_squote / {!csv.squote .}}*
-- Wrap the field contents with quotation marks:
alias csv.dq = {csv.dquote csv.dquoted_field csv.dquote}
alias csv.sq = {csv.squote csv.squoted_field csv.squote}
-- Look for either double or single quoted fields
csv.quoted_field = csv.dq / csv.sq

-- These match any unquoted field:
csv.unquoted_comma = common.number / {!"," .}*	    -- common.number has no comma in it
csv.unquoted_semicolon = common.number / {!";" .}*  -- nor any semicolon in it

-- Look for quoted fields first, then anything else
alias csv.field_comma = csv.quoted_field / csv.unquoted_comma
alias csv.field_semicolon = csv.quoted_field / csv.unquoted_semicolon

-- Two patterns, one for each separator:
csv.line_comma = csv.field_comma ("," csv.field_comma)*
csv.line_semicolon = csv.field_semicolon (";" csv.field_semicolon)*

-- Use this pattern if you don't know which separator your file will use:
csv.line = csv.line_comma / csv.line_semicolon

