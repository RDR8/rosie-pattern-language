---- -*- Mode: rpl; -*-                                                                             
---- vim:syn=rosie
----
---- time.rpl    Common time patterns in Rosie Pattern Language
----
---- Â© Copyright IBM Corporation 2016, 2017.
---- LICENSE: MIT License (https://opensource.org/licenses/mit-license.html)
---- AUTHORS: Jamie A. Jennings, Kevin Zander

rpl 1.1

package time

--
-- RFC3339
--

--   date-fullyear   = 4DIGIT
--   date-month      = 2DIGIT  ; 01-12
--   date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on
--                             ; month/year
--   time-hour       = 2DIGIT  ; 00-23
--   time-minute     = 2DIGIT  ; 00-59
--   time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second
--                             ; rules
--   time-secfrac    = "." 1*DIGIT
--   time-numoffset  = ("+" / "-") time-hour ":" time-minute
--   time-offset     = "Z" / time-numoffset
--
--   partial-time    = time-hour ":" time-minute ":" time-second
--                     [time-secfrac]
--   full-date       = date-fullyear "-" date-month "-" date-mday
--   full-time       = partial-time time-offset
--
--   date-time       = full-date "T" full-time
--
-- Notes:
-- T and Z may be lowercase.
-- The "T" separator in the date-time rule can be a space instead.

local alias d = [:digit:]

-- RFC3339 patterns
hour = { { [01] [0-9] } /
              { "2"  [0-3] } }
-- test hour accepts "00", "15", "20", "23"
-- test hour rejects "", "0", "5", "24", "99"
minute = { [0-5] [0-9] }
-- test minute accepts "00", "25", "39", "59"
-- test minute rejects "", "0", "60", "99"
second = { { [0-5] [0-9] } /
                "60"            }     -- time_second must match 60 for leap second
-- test second accepts "00", "24", "47", "59", "60"
-- test second rejects "", "0", "9", "61", "99"
secfrac = { "." d+ }
-- test secfrac accepts ".00000", ".12435", ".99999999", ".0"
-- test secfrac rejects "", "0", ".", ".now", ".0r", ".never"
numoffset = { [+-] hour ":" minute }
-- test numoffset accepts "+00:10", "-23:59"
-- test numoffset rejects "@12:34", "-55:00", "+2:30"
offset = { [Zz] / numoffset }
-- test offset accepts "Z", "z", "+00:10", "-23:59"
-- test offset rejects "", "2", "*00:00", "+00:60"
partial = { hour ":" minute ":" second secfrac? }
-- test partial accepts "00:00:00", "00:00:00.00000", "10:30:02.125", "23:59:60"
-- test partial rejects "", "24:10:10", "17:28:33.0r"

full = { partial offset }
-- the above tests should handle this
time = { partial offset }
-- the above tests should handle this

-- RFC2822 (Alternative patterns, less exact than RFC3339)
althour = d{2,2}
-- test althour accepts "00", "20", "85", "99"
-- test althour rejects "", "0", "9", "999"
altminute = d{2,2}
-- test altminute accepts "00", "38", "71", "99"
-- test altminute rejects "", "0", "7", "9999"
altsecond = d{2,2}
-- test altsecond accepts "01", "23", "45", "67"
-- test altsecond rejects "", "2", "5", "101"
altzone = { [+-] d{4,4} }
-- test altzone accepts "+0000", "-4321", "+9999", "-9870"
-- test altzone rejects "", "@0100", "-1", "+50", "1000"
alttimeofday = { althour ":" altminute { ":" altsecond }? }
-- test alttimeofday accepts "16:08:33", "01:55", "99:00:99", "00:00"
-- test alttimeofday rejects "", "2341", "10:50.22", "now"
alttime = alttimeofday altzone
-- the above tests should handle this
