Major work items:

* Streamline the engine implementation

* Consolidate the Rosie API
  + Engine related:
    + new engine
    + delete engine
    + ping engine
  + RPL related:
    + RPL statement (incremental compilation)
    + RPL file compilation
    + RPL manifest processing
  + Match related:
    + match pattern against string
    + match pattern against file
    + eval pattern against string
  - Post-processing transformations:
    - ???
  - Human interaction / debugging:
    + get env contents in json format
    - CRUD on color assignments for color output?
    - help?
    - debug?

* Use syntax transformation (on ASTs) instead of current code for:
    - quantified expressions
    - tokenization ("cooked" expressions)
    - repetition syntax with one bound, e.g. {5} (meaning {5,5})

* Enhance syntax error reporting (do this AFTER the syntax transformation work is done) 

* Change the REPL to incrementally parse the input line (dispatch on the first token, then parse the rest)

* Implement post-match instructions, based on prototype work

* Enforce package namespaces, with import/export declarations

* Optimizations
    - Overall
        - Profiling
	- If profiling suggests it would help, try LuaJIT
	- Save a compiled env so that we don't have to re-compile always
	  - Approach: de/serialize a rosie engine's environment
	  - Will luac be helpful as well?
	      luac src/run.lua 
	      lua -e "ROSIE_HOME=\"$RH\"; SCRIPTNAME=\"xyz\"" luac.out -repl
	- Tune the run-time matching loop
    - Compiler (likely but not necessarily needed)
        - Remove unnecessary assertions (which are slow in Lua)
	- Avoid multiple table indexing by assigning to a local
	    - Within modules, by assigning imported values to locals
	    - Within functions
	