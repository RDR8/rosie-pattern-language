Tuesday, April 26, 2016

a+	       == (a+)		/at top level/
(a+)	       aaaa...a~
{a+}	       aaaa...a

{a}+	       == ({a}+) == (a+)	aaaa...a~	/at top level/
({a}+)	       == ({a}+)
{{a}+}	       == {a+}			aaaa...a
(a)+	       == ((a)+)	/at top level/
((a)+)	       a~a~a~a~
{(a)+}	       a~a~a~a

{(a)+ b}       a~a~a~ab
{a}+ b	       == ({a}+ b)	/at top level/
a+ b  	       == (a+ b) == ({a}+ b)	/at top level/
({a}+ b)       aaaa...a~b~

a++	       syntax error
(a+)+	       == ((a+)+)	/at top level/
((a+)+)	       aaaa...a~aaaa...a~
((a)+)+	       == (((a)+)+)	/at top level/
(((a)+)+)      a~a~a~a~
{(a+)+}	       aaaa...a~aaaa...a
{{a+}+}	       aaaa...aaaaa...a

a	       == (a)		/at top level/
(a)	       a~
{a}	       a
a$	       == (a$)		/at top level/
(a$)	       a~<EOS> == a<EOS>
{a$}	       a<EOS> == a~<EOS>

a b	       == (a b)		/at top level/
(a b)	       a~b~
{(a b)}	       a~b

Here's how to proceed:
- If we let the user change the boundary definition (which we want to do), then
  we must keep the elaborate way of compiling quantified expressions, because
  they may set it to something that is NOT idempotent.
- But, we must modify the qe calculation to NOT put a boundary at the end.
- An expression that is not a group will be wrapped in a cooked group when it is
  compiled (e.g. at top level or when being bound to an identifier).
- A single expression, in cooked mode, will have a boundary appended at top level. 
- 

Saturday, April 23, 2016

Issue of how to define the boundary and the meaning of cooked expressions
relative to the DWIM concept:

Note that this transcript is using the boundary enhancement that considers the
start of the string to be a boundary.  But it is still the case that a cooked
exp only looks for a boundary between elements of a SEQUENCE.  


bash-3.2$ rosie -repl
This is Rosie v0.92boundary
Rosie> .match "a", "abc"
{"*": 
   {"pos": 1.0, 
    "text": "a", 
    "subs": []}}
Warning: 2 unmatched characters at end of input
Rosie> .match ("a"), "abc"
{"*": 
   {"pos": 1.0, 
    "text": "a", 
    "subs": []}}
Warning: 2 unmatched characters at end of input
Rosie> .match "a"~, "abc"
     SEQUENCE: "a" ~
     FAILED to match against input "abc"
     Explanation:
  1.....LITERAL STRING: "a"
        Matched "a" (against input "abc")
  2.....BOUNDARY
        FAILED to match against input "bc"

Repl: No match  (turn debug off to hide the match evaluation trace)
Rosie> .match "a"~, "a bc"
{"*": 
   {"pos": 1.0, 
    "text": "a ", 
    "subs": []}}
Warning: 2 unmatched characters at end of input
Rosie> .match "a"~, " a bc"
     SEQUENCE: "a" ~
     FAILED to match against input " a bc"
     Explanation:
  1.....LITERAL STRING: "a"
        FAILED to match against input " a bc"

Repl: No match  (turn debug off to hide the match evaluation trace)
Rosie> .match ~"a"~, " a bc"
{"*": 
   {"pos": 1.0, 
    "text": " a ", 
    "subs": []}}
Warning: 2 unmatched characters at end of input
Rosie> 

Rosie> .match ~"a"~, " a#bc"
{"*": 
   {"subs": [], 
    "pos": 1.0, 
    "text": " a"}}
Warning: 3 unmatched characters at end of input
Rosie> .match ~"a"~, " a"
{"*": 
   {"subs": [], 
    "pos": 1.0, 
    "text": " a"}}
Rosie> .match ~"a"~, "a"
{"*": 
   {"subs": [], 
    "pos": 1.0, 
    "text": "a"}}
Rosie>

Rosie> .match ("a")+, " a a"
Repl: No match  (turn debug on to show the match evaluation trace)
Rosie> .match ~("a")+, " a a"
{"*": 
   {"subs": [], 
    "pos": 1.0, 
    "text": " a a"}}
Rosie>

----------------------------------------------------------------------------------------
-- To look for tokens, it's best to be explicit about what a token is, and
-- whether or not you want to keep the intertoken space.  The ~ binding to
-- Rosie's token boundary definition is not actually very useful for this!
-- (Need to rethink whether to expose ~ at all, or to use something else?)
----------------------------------------------------------------------------------------
 
Rosie> token = {[:punct:] / {![:punct:] ![:space:] !$ .}+}
Rosie> s
alias s = [:space:]
Rosie> .match {s* token}*, "  hi there, \n  mary     "
{"*": 
   {"text": "  hi there, \
  mary", 
    "pos": 1.0, 
    "subs": 
      [{"token": 
         {"text": "hi", 
          "pos": 3.0, 
          "subs": []}}, 
       {"token": 
         {"text": "there", 
          "pos": 6.0, 
          "subs": []}}, 
       {"token": 
         {"text": ",", 
          "pos": 11.0, 
          "subs": []}}, 
       {"token": 
         {"text": "mary", 
          "pos": 16.0, 
          "subs": []}}]}}
Warning: 5 unmatched characters at end of input
Rosie> tokens = {[:space:]* token}*

Rosie> .match tokens, "  hi there, \n  mary     "
{"tokens": 
   {"subs": 
      [{"token": 
         {"subs": [], 
          "text": "hi", 
          "pos": 3.0}}, 
       {"token": 
         {"subs": [], 
          "text": "there", 
          "pos": 6.0}}, 
       {"token": 
         {"subs": [], 
          "text": ",", 
          "pos": 11.0}}, 
       {"token": 
         {"subs": [], 
          "text": "mary", 
          "pos": 16.0}}], 
    "text": "  hi there, \
  mary", 
    "pos": 1.0}}
Warning: 5 unmatched characters at end of input
Rosie>

----------------------------------------------------------------------------------------
-- Here is a pattern for tokens written using Rosie's boundary pattern:
----------------------------------------------------------------------------------------

Rosie> token = {. {!~ .}*}
Rosie> tokens = {~ token}*
Rosie> .match tokens, "  hi there, \n  mary     "
{"tokens": 
   {"subs": 
      [{"token": 
         {"subs": [], 
          "text": "hi", 
          "pos": 3.0}}, 
       {"token": 
         {"subs": [], 
          "text": "there", 
          "pos": 6.0}}, 
       {"token": 
         {"subs": [], 
          "text": ",", 
          "pos": 11.0}}, 
       {"token": 
         {"subs": [], 
          "text": "mary", 
          "pos": 16.0}}], 
    "text": "  hi there, \
  mary", 
    "pos": 1.0}}
Warning: 5 unmatched characters at end of input
Rosie> 


----------------------------------------------------------------------------------------
-- And here is one where 'token' can be used by itself, and it will fail when it
-- is not looking at a token.
----------------------------------------------------------------------------------------

Rosie> token = {![:space:] . {!~ .}*}
Rosie> tokens = {~ token}*
Rosie> .match token, ""
Repl: No match  (turn debug on to show the match evaluation trace)
Rosie> .match token, "  hi"
Repl: No match  (turn debug on to show the match evaluation trace)
Rosie> .match token, "hi  "
{"token": 
   {"pos": 1.0, 
    "text": "hi", 
    "subs": []}}
Warning: 2 unmatched characters at end of input
Rosie> .match ~token, "  hi"
{"*": 
   {"pos": 1.0, 
    "text": "  hi", 
    "subs": 
      [{"token": 
         {"pos": 3.0, 
          "text": "hi", 
          "subs": []}}]}}
Rosie> .match tokens, "  hi there, \n  mary     "
{"tokens": 
   {"pos": 1.0, 
    "text": "  hi there, \
  mary", 
    "subs": 
      [{"token": 
         {"pos": 3.0, 
          "text": "hi", 
          "subs": []}}, 
       {"token": 
         {"pos": 6.0, 
          "text": "there", 
          "subs": []}}, 
       {"token": 
         {"pos": 11.0, 
          "text": ",", 
          "subs": []}}, 
       {"token": 
         {"pos": 16.0, 
          "text": "mary", 
          "subs": []}}]}}
Warning: 5 unmatched characters at end of input
Rosie>
